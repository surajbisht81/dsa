/*Last Updated: 05-08-2019
Given a string and a positive integer d. Some characters may be repeated in the given string. Rearrange characters of the given string such that the same
 characters become d distance away from each other*/

#include <bits/stdc++.h>
using namespace std;
#define MAX_CHAR 256

int max_freq(int freq[], int *maxim)
{
   int max = 0;
   for(int i=1; i<MAX_CHAR; i++)
   {
       if(freq[i]>freq[max])
        {
            max=i;
            *maxim = freq[i];
        }
    
   }
   return max;
}

int rearrange(char str[], int n, char out[], int d)
{
    int freq[MAX_CHAR] = {0};
    
    for(int i=0; i<n; i++)
     freq[str[i]]++;
     
    for(int i=0; i<n; i++)
    {
        int maxim;
        
        if((maxim-1)*d>=n)    // (freq of maxim_freq number -1)* distance(d) is >= than n i.e., it is excedding the limit of our string length;
         return 0;
         
        int j = max_freq(freq, &maxim);
        
        int k=0;
        while(k<n)
        {
            if(out[k]=='\0')
              {
                  out[k]=j;
                  maxim--;
                  break;
              }
             k++;
        }
        for(k=k+d; maxim!=0 and k<n; k=k+d)
        {
            out[k]=j;
            maxim--;
        }
        if(k>=n)
         return 0;
         
        freq[j]=0;
    }
    out[n]='\0';
    return 1;
}

int main() {
    
     char str[] = "aaa"; 
     int n = strlen(str);
     char out[n] = {'\0'};
     
     if(rearrange(str, n, out, 2))
      cout<<out<<endl;
     else
      cout<<"\nnot possible."<<endl;
      return 0;
}