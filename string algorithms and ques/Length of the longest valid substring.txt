Input: str = "(()()"

Initialize result as 0 and stack with one item -1.

For i = 0, str[0] = '(', we push 0 in stack

For i = 1, str[1] = '(', we push 1 in stack

For i = 2, str[2] = ')', currently stack has [-1, 0, 1], we pop
from the stack and the stack now is [-1, 0] and length of current
valid substring becomes 2 (we get this 2 by subtracting stack top 
from current index).
Since the current length is more than the current result, we update the result.

For i = 3, str[3] = '(', we push again, stack is [-1, 0, 3].

For i = 4, str[4] = ')', we pop from the stack, stack becomes 
[-1, 0] and length of current valid substring becomes 4 (we get 
this 4 by subtracting stack top from current index). 
Since current length is more than current result, we update result. 

// C++ program to find length of the longest valid 
// substring 
#include<bits/stdc++.h> 
using namespace std; 

int findMaxLen(string str) 
{ 
	int n = str.length(); 

	// Create a stack and push -1 as initial index to it. 
	stack<int> stk; 
	stk.push(-1); 

	// Initialize result 
	int result = 0; 

	// Traverse all characters of given string 
	for (int i=0; i<n; i++) 
	{ 
		// If opening bracket, push index of it 
		if (str[i] == '(') 
		stk.push(i); 

		else // If closing bracket, i.e.,str[i] = ')' 
		{ 
			// Pop the previous opening bracket's index 
			stk.pop(); 

			// Check if this length formed with base of 
			// current valid substring is more than max 
			// so far 
			if (!stk.empty()) 
				result = max(result, i - stk.top()); 

			// If stack is empty. push current index as 
			// base for next valid substring (if any) 
			else stk.push(i); 
		} 
	} 

	return result; 
} 

// Driver program 
int main() 
{ 
	string str = "((()()"; 
	cout << findMaxLen(str) << endl; 

	str = "()(()))))"; 
	cout << findMaxLen(str) << endl ; 

	return 0; 
} 


//another method of o(1) space
// C++ program to implement the above approach 

#include <bits/stdc++.h> 
using namespace std; 

// Function to return the length of 
// the longest valid substring 
int solve(string s, int n) 
{ 

	// Variables for left and right counter. 
	// maxlength to store the maximum length found so far 
	int left = 0, right = 0, maxlength = 0; 

	// Iterating the string from left to right 
	for (int i = 0; i < n; i++) { 
		// If "(" is encountered, 
		// then left counter is incremented 
		// else right counter is incremented 
		if (s[i] == '(') 
			left++; 
		else
			right++; 

		// Whenever left is equal to right, it signifies 
		// that the subsequence is valid and 
		if (left == right) 
			maxlength = max(maxlength, 2 * right); 

		// Reseting the counters when the subsequence 
		// becomes invalid 
		else if (right > left) 
			left = right = 0; 
	} 

	left = right = 0; 

	// Iterating the string from right to left 
	for (int i = n - 1; i >= 0; i--) { 

		// If "(" is encountered, 
		// then left counter is incremented 
		// else right counter is incremented 
		if (s[i] == '(') 
			left++; 
		else
			right++; 

		// Whenever left is equal to right, it signifies 
		// that the subsequence is valid and 
		if (left == right) 
			maxlength = max(maxlength, 2 * left); 

		// Reseting the counters when the subsequence 
		// becomes invalid 
		else if (left > right) 
			left = right = 0; 
	} 
	return maxlength; 
} 

// Driver code 
int main() 
{ 
	cout << solve("((()()()()(((())", 16); 
	return 0; 
} 
